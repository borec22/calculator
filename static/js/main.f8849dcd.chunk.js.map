{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","expression","setExpression","lastPressed","setLastPressed","message","setMessage","numbers","operations","ids","handleOnClick","e","innerText","currentTarget","test","evaluated","eval","toString","splatted","split","lastNumber","slice","includes","lastThreeSymbols","state","Number","className","id","onClick","filter","num","map","operation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"m1BAGA,SAASA,MAAO,IAAD,UACwBC,oDAAiB,KADzC,2LACLC,WADK,cACOC,cADP,yBAE0BF,oDAAS,IAFnC,4LAELG,YAFK,cAEQC,eAFR,yBAGkBJ,oDAAiB,IAHnC,4LAGLK,QAHK,cAGIC,WAHJ,cAKRC,QAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACxDC,WAAa,CAAC,IAAK,IAAK,IAAK,KAM7BC,IAAe,CAChB,EAAK,OACL,EAAK,MACL,EAAK,MACL,EAAK,QACL,EAAK,OACL,EAAK,OACL,EAAK,MACL,EAAK,QACL,EAAK,QACL,EAAK,OACL,IAAK,SACL,IAAK,WACL,IAAK,MACL,IAAK,WACL,IAAK,SACL,IAAK,UACL,GAAM,SAGHC,cAAgB,SAAhBA,cAAiBC,GACpB,IAAMC,UAAYD,EAAEE,cAAcD,UAQlC,OANAR,eAAeQ,WAEX,aAAaE,KAAKF,YAA0B,KAAZP,SACjCC,WAAW,IAGNM,WACL,IAAK,KACFV,cAAc,KACdI,WAAW,IACX,MAEH,IAAK,IACF,IAAIS,UAEJ,IACGA,UAAYC,KAAKf,YAClB,MAAOU,GACNT,cAAcD,YACd,MAGHC,cAAca,UAAUE,YAExB,MAEH,IAAK,IACF,IAAIC,SAAWjB,WAAWkB,MAAM,cAC5BC,WAAaF,SAASG,OAAO,GAAG,GAE/BD,WAAWE,SAAS,MACtBpB,cAAcD,WAAa,KAE9B,MAEH,QACG,IAAIsB,iBAAmBtB,WAAWoB,OAAO,GAGzC,GAAoB,MAAhBlB,aAAuBI,QAAQe,SAASV,WACzCV,cAAcU,gBAEV,GAAI,aAAaE,KAAKX,cAAgB,WAAWW,KAAKF,WAAY,CAEtE,GACwB,QAArBW,kBACqB,QAArBA,kBACqB,QAArBA,iBAGA,YADArB,eAAc,SAAAsB,GAAK,OAAIA,EAAMH,MAAM,GAAI,GAAKT,aAG5CV,eAAc,SAAAsB,GAAK,OAAIA,EAAMH,MAAM,GAAI,GAAKT,kBAG3C,GAAI,aAAaE,KAAKX,cAAgB,aAAaW,KAAKF,WAAY,CAExE,IACwB,QAArBW,kBACqB,QAArBA,kBACqB,QAArBA,kBACqB,QAArBA,mBAEkB,MAAdX,UACD,OAINV,eAAc,SAAAsB,GAAK,OAAIA,EAAQ,IAAMZ,iBAEjC,CACJ,IAAIM,UAAWjB,WAAWkB,MAAM,cAC5BC,YAAaF,UAASG,OAAO,GAAG,GAEhCI,OAAOL,aAAc,iBACtBd,WAAW,mBAEXJ,eAAc,SAAAsB,GAAK,MAAc,MAAVA,EAAgBZ,UAAYY,EAAQZ,gBAQ1E,OACG,kEAAKc,UAAU,MAAf,SACG,mEAAKA,UAAU,YAAf,UACG,kEAAKC,GAAG,UAAUD,UAAU,UAA5B,SACIrB,SAAoBJ,aAExB,mEAAKyB,UAAU,WAAf,UACG,mEAAKA,UAAU,eAAf,UACG,qEAAQC,GAAIlB,IAAG,GAAQiB,UAAU,yBAAyBE,QAASlB,cAAnE,gBACA,qEAAQiB,GAAIlB,IAAI,KAAMiB,UAAU,gBAAgBE,QAASlB,cAAzD,eACCH,QAAQsB,QAAO,SAAAC,GAAG,MAAY,MAARA,KAAaC,KAAI,SAACD,GAAD,OACrC,qEAEGH,GAAIlB,IAAIqB,GACRJ,UAAU,cACVE,QAASlB,cAJZ,SAMIoB,GALIA,MAOX,qEAAQH,GAAIlB,IAAI,GAAMiB,UAAU,oBAAoBE,QAASlB,cAA7D,eACA,qEAAQiB,GAAIlB,IAAI,KAAMiB,UAAU,cAAcE,QAASlB,cAAvD,kBAEH,kEAAKgB,UAAU,eAAf,SACIlB,WAAWuB,KAAI,SAAAC,GAAS,OACtB,qEAEGL,GAAIlB,IAAIuB,GACRN,UAAS,wBAAiC,MAAdM,GAAqB,SACjDJ,QAASlB,cAJZ,SAMIsB,GALIA,gBAcdjC,2B,uICpJAkC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC7C,EAAA,EAAD,MAEF8C,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f8849dcd.chunk.js","sourcesContent":["import React, {MouseEvent, useState} from 'react';\nimport './App.css';\n\nfunction App() {\n   const [expression, setExpression] = useState<string>('0');\n   const [lastPressed, setLastPressed] = useState('');\n   const [message, setMessage] = useState<string>('');\n\n   let numbers = ['7', '8', '9', '4', '5', '6', '1', '2', '3', '0'];\n   let operations = ['*', '-', '+', '='];\n\n   type idsType = {\n      [key: string]: string\n   }\n\n   let ids: idsType = {\n      '0': 'zero',\n      '1': 'one',\n      '2': 'two',\n      '3': 'three',\n      '4': 'four',\n      '5': 'five',\n      '6': 'six',\n      '7': 'seven',\n      '8': 'eight',\n      '9': 'nine',\n      '=': 'equals',\n      '-': 'subtract',\n      '+': 'add',\n      '*': 'multiply',\n      '/': 'divide',\n      '.': 'decimal',\n      'AC': 'clear',\n   }\n\n   const handleOnClick = (e: MouseEvent<HTMLButtonElement>) => {\n      const innerText = e.currentTarget.innerText;\n\n      setLastPressed(innerText);\n\n      if (/[\\+\\-\\*\\/]/.test(innerText) && message !== '') {\n         setMessage('');\n      }\n\n      switch (innerText) {\n         case 'AC': {\n            setExpression('0');\n            setMessage('');\n            break;\n         }\n         case '=': {\n            let evaluated;\n\n            try {\n               evaluated = eval(expression);\n            } catch (e) {\n               setExpression(expression);\n               break;\n            }\n\n            setExpression(evaluated.toString());\n\n            break;\n         }\n         case '.': {\n            let splatted = expression.split(/[\\+\\-\\*\\/]/);\n            let lastNumber = splatted.slice(-1)[0];\n\n            if (!lastNumber.includes('.')) {\n               setExpression(expression + '.');\n            }\n            break;\n         }\n         default: {\n            let lastThreeSymbols = expression.slice(-3);\n\n            // enter number after calculation\n            if (lastPressed === '=' && numbers.includes(innerText)) {\n               setExpression(innerText);\n\n            } else if (/[\\+\\-\\/\\*]/.test(lastPressed) && /[\\+\\/\\*]/.test(innerText)) {\n\n               if (\n                  lastThreeSymbols === '+ -' ||\n                  lastThreeSymbols === '* -' ||\n                  lastThreeSymbols === '/ -'\n               ) {\n                  setExpression(state => state.slice(0, -3) + innerText);\n                  return;\n               } else {\n                  setExpression(state => state.slice(0, -1) + innerText);\n               }\n\n            } else if (/[\\+\\-\\/\\*]/.test(lastPressed) && /[\\+\\-\\/\\*]/.test(innerText)) {\n\n               if (\n                  lastThreeSymbols === '+ -' ||\n                  lastThreeSymbols === '* -' ||\n                  lastThreeSymbols === '/ -' ||\n                  lastThreeSymbols === '- -'\n               ) {\n                  if (innerText === '-') {\n                     return;\n                  }\n               }\n\n               setExpression(state => state + ' ' + innerText);\n\n            } else {\n               let splatted = expression.split(/[\\+\\-\\*\\/]/);\n               let lastNumber = splatted.slice(-1)[0];\n\n               if (Number(lastNumber) > 9007199254740991) {\n                  setMessage('DIGIT LIMIT MET');\n               } else {\n                  setExpression(state => state === '0' ? innerText : state + innerText);\n               }\n            }\n         }\n      }\n\n   }\n\n   return (\n      <div className=\"App\">\n         <div className='container'>\n            <div id='display' className='display'>\n               {message ? message : expression}\n            </div>\n            <div className='controls'>\n               <div className='numContainer'>\n                  <button id={ids['AC']} className='button lightGray big-w' onClick={handleOnClick}>AC</button>\n                  <button id={ids['/']} className='button orange' onClick={handleOnClick}>/</button>\n                  {numbers.filter(num => num !== '0').map((num: string) =>\n                     <button\n                        key={num}\n                        id={ids[num]}\n                        className='button gray'\n                        onClick={handleOnClick}\n                     >\n                        {num}\n                     </button>)}\n                  <button id={ids['0']} className='button gray big-w' onClick={handleOnClick}>0</button>\n                  <button id={ids['.']} className='button gray' onClick={handleOnClick}>.</button>\n               </div>\n               <div className='opsContainer'>\n                  {operations.map(operation =>\n                     <button\n                        key={operation}\n                        id={ids[operation]}\n                        className={`button orange ${operation === '=' && 'big-h'}`}\n                        onClick={handleOnClick}\n                     >\n                        {operation}\n                     </button>)}\n               </div>\n            </div>\n         </div>\n      </div>\n   );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}